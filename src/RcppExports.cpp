// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cMBKRall
NumericVector cMBKRall(NumericVector Ti, NumericVector censor, NumericMatrix X, NumericVector weight_C);
RcppExport SEXP _GLASM_cMBKRall(SEXP TiSEXP, SEXP censorSEXP, SEXP XSEXP, SEXP weight_CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Ti(TiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type censor(censorSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weight_C(weight_CSEXP);
    rcpp_result_gen = Rcpp::wrap(cMBKRall(Ti, censor, X, weight_C));
    return rcpp_result_gen;
END_RCPP
}
// calculate_corrhat
Eigen::ArrayXXd calculate_corrhat(Eigen::Map<Eigen::ArrayXXd> X, Eigen::Map<Eigen::ArrayXXd> betaMat, int n, int d);
RcppExport SEXP _GLASM_calculate_corrhat(SEXP XSEXP, SEXP betaMatSEXP, SEXP nSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type betaMat(betaMatSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_corrhat(X, betaMat, n, d));
    return rcpp_result_gen;
END_RCPP
}
// calculate_Testhat
Eigen::ArrayXd calculate_Testhat(Eigen::Map<Eigen::ArrayXXd> X, Eigen::Map<Eigen::ArrayXXd> betaMat, int n, int d);
RcppExport SEXP _GLASM_calculate_Testhat(SEXP XSEXP, SEXP betaMatSEXP, SEXP nSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXXd> >::type betaMat(betaMatSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_Testhat(X, betaMat, n, d));
    return rcpp_result_gen;
END_RCPP
}
// SPMBgraphsqrtKeh
Eigen::MatrixXd SPMBgraphsqrtKeh(Eigen::Map<Eigen::MatrixXd> data, NumericVector lambda, int nlambda, int d);
RcppExport SEXP _GLASM_SPMBgraphsqrtKeh(SEXP dataSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(SPMBgraphsqrtKeh(data, lambda, nlambda, d));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GLASM_cMBKRall", (DL_FUNC) &_GLASM_cMBKRall, 4},
    {"_GLASM_calculate_corrhat", (DL_FUNC) &_GLASM_calculate_corrhat, 4},
    {"_GLASM_calculate_Testhat", (DL_FUNC) &_GLASM_calculate_Testhat, 4},
    {"_GLASM_SPMBgraphsqrtKeh", (DL_FUNC) &_GLASM_SPMBgraphsqrtKeh, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_GLASM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
